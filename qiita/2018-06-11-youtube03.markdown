## 前段として

先日、カフェにいたら

隣にきた女性が

タイピングがものすごく五月蝿くて迷惑でした。

タブレットPCでキーがバッキバキのテッカテカで

指がキーを貫通するんじゃないか？っていうくらい力強いタイピングでした。

普段、マイクロソフトは好きな方ではないのですが

あれをみたら流石にSurfaceに同情しました。

それでもプライベートで無駄な戦いは避けたかったので帰りましたが

どんなに格好良くてもどんなに早くても

人に迷惑かけるのは良くないと普通に勉強になりました。

また、1つ大人になりました。

ありがとう。

## youtubeAPI 応用編① -動画を片方ずつ再生する-

前回のサンプルでは

youtubeAPIが提供しているサンプルをベースにやっていたため

2つの動画が同時に再生されていましたが

通常では2つの動画を同時に再生することは無いでしょう。

なので今回は交互に再生する。方法で実装します。

前回か前々回の話でも言いましたが

動画の再生準備などの状態変化を正確にとれるのはYT.Playerのeventです。

なのでこのイベントを中心に動画をコントロールします。

### 1.onReady（動画の準備ができた時）

まず複数の動画をコントロールするにあたり

共通のフラグが必要です。なので

フラグは真偽値でも良いですが

何番目の動画が再生されているかどうかの判定も含んじゃいましょう。

なので

```
-1	再生されていない
0	1番目の動画が再生されている
...
```
で判定したいと思います。

```js

setParameters : function(){
	...
	this.isPlayNum = -1;
}
```

この共通フラグを用いて

動画の再生準備ができたら

このフラグに再生されている番号を打ち込む（もちろん初期は再生されていないので-1で初期定義します。）

↓

- -1以外であれば、すでに何かしらの動画が再生されている
- -1であれば、何も再生されていない。

ので

-1じゃないと初期動画は再生しない

というロジックであれば

ほぼ同時だとしても

先に準備完了になった動画のみ再生され

後続の動画は再生されないようにできます。

![1.png](http://nekokke.tech/assets/img/youtube03/1.png)

コードだとこんな感じです。

```js

onPlayerReady : function(event){
	if(this.isPlayNum === -1){
		this.isPlayNum = event.target.customOpt.index;
		event.target.playVideo();
	}
}
```

ただこのままだと

2つ目の動画がそのままになってしまうので

交互に再生するために

ここで次の動画の予約ができる仕組みを作成します。

ここで予約機能用の配列を作成します。

```js

setParameters : function(){
	...
	this.VIDEO_QUEUE = [];
}
```

2つめの動画はキューに登録して次の再生を待ちます。

```js

onPlayerReady : function(event){
	if(this.isPlayNum === -1){
		this.isPlayNum = event.target.customOpt.index;
		event.target.playVideo();
	} else {
		this.VIDEO_QUEUE.push = event.target.customOpt.index;
	}
}
```

次は再生部分です。

[続きはこちら…](http://nekokke.tech/youtube03/#-)